// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: task_history.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTaskHistory = `-- name: CreateTaskHistory :one
INSERT INTO task_histories (user_uuid, name, start_time, end_time)
VALUES ($1, $2, $3, $4)
RETURNING name,
    CONCAT(
        FLOOR(EXTRACT(EPOCH FROM (end_time - start_time)) / 3600), ' hours ',
        FLOOR(EXTRACT(EPOCH FROM (end_time - start_time)) / 60 % 60), ' minutes'
    ) AS duration
`

type CreateTaskHistoryParams struct {
	UserUuid  pgtype.UUID        `json:"user_uuid"`
	Name      string             `json:"name"`
	StartTime pgtype.Timestamptz `json:"start_time"`
	EndTime   pgtype.Timestamptz `json:"end_time"`
}

type CreateTaskHistoryRow struct {
	Name     string      `json:"name"`
	Duration interface{} `json:"duration"`
}

func (q *Queries) CreateTaskHistory(ctx context.Context, arg CreateTaskHistoryParams) (CreateTaskHistoryRow, error) {
	row := q.db.QueryRow(ctx, createTaskHistory,
		arg.UserUuid,
		arg.Name,
		arg.StartTime,
		arg.EndTime,
	)
	var i CreateTaskHistoryRow
	err := row.Scan(&i.Name, &i.Duration)
	return i, err
}

const getTasksResultByPeriod = `-- name: GetTasksResultByPeriod :many
WITH task_durations AS (
    SELECT
        th.name AS task_name,
        EXTRACT(EPOCH FROM (th.end_time - th.start_time)) AS duration_seconds
    FROM
        task_histories th
    WHERE
        th.end_time >= NOW() - CAST($1 AS INTERVAL) AND user_uuid = $2
)
SELECT
    td.task_name,
    CONCAT(
        FLOOR(td.duration_seconds / 3600), ' hours ',
        FLOOR((td.duration_seconds / 60) % 60), ' minutes'
    ) AS duration,
    CONCAT(
        FLOOR(SUM(td.duration_seconds) OVER () / 3600), ' hours ',
        FLOOR((SUM(td.duration_seconds) OVER () / 60) % 60), ' minutes'
    ) AS total_duration
FROM
    task_durations td
ORDER BY
    td.duration_seconds desc
`

type GetTasksResultByPeriodParams struct {
	Column1  pgtype.Interval `json:"column_1"`
	UserUuid pgtype.UUID     `json:"user_uuid"`
}

type GetTasksResultByPeriodRow struct {
	TaskName      string      `json:"task_name"`
	Duration      interface{} `json:"duration"`
	TotalDuration interface{} `json:"total_duration"`
}

func (q *Queries) GetTasksResultByPeriod(ctx context.Context, arg GetTasksResultByPeriodParams) ([]GetTasksResultByPeriodRow, error) {
	rows, err := q.db.Query(ctx, getTasksResultByPeriod, arg.Column1, arg.UserUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTasksResultByPeriodRow{}
	for rows.Next() {
		var i GetTasksResultByPeriodRow
		if err := rows.Scan(&i.TaskName, &i.Duration, &i.TotalDuration); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
