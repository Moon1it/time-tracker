// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tasks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (user_uuid, name)
VALUES ($1, $2)
RETURNING uuid, user_uuid, name, start_time, end_time
`

type CreateTaskParams struct {
	UserUuid pgtype.UUID `json:"user_uuid"`
	Name     string      `json:"name"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask, arg.UserUuid, arg.Name)
	var i Task
	err := row.Scan(
		&i.Uuid,
		&i.UserUuid,
		&i.Name,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE user_uuid = $1
`

func (q *Queries) DeleteTask(ctx context.Context, userUuid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTask, userUuid)
	return err
}

const updateTaskEndTime = `-- name: UpdateTaskEndTime :one
UPDATE tasks
SET end_time = NOW()
WHERE user_uuid = $1
RETURNING uuid, user_uuid, name, start_time, end_time
`

func (q *Queries) UpdateTaskEndTime(ctx context.Context, userUuid pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, updateTaskEndTime, userUuid)
	var i Task
	err := row.Scan(
		&i.Uuid,
		&i.UserUuid,
		&i.Name,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}
