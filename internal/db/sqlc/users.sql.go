// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (passport_number, surname, name, patronymic, address)
VALUES ($1, $2, $3, $4, $5)
RETURNING uuid, passport_number, surname, name, patronymic, address, created_at, updated_at
`

type CreateUserParams struct {
	PassportNumber string      `json:"passport_number"`
	Surname        string      `json:"surname"`
	Name           string      `json:"name"`
	Patronymic     pgtype.Text `json:"patronymic"`
	Address        string      `json:"address"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.PassportNumber,
		arg.Surname,
		arg.Name,
		arg.Patronymic,
		arg.Address,
	)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.PassportNumber,
		&i.Surname,
		&i.Name,
		&i.Patronymic,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserByUUID = `-- name: DeleteUserByUUID :exec
DELETE FROM users
WHERE uuid = $1
`

func (q *Queries) DeleteUserByUUID(ctx context.Context, userUuid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserByUUID, userUuid)
	return err
}

const getUserByPassportNumber = `-- name: GetUserByPassportNumber :one
SELECT uuid, passport_number, surname, name, patronymic, address, created_at, updated_at FROM users
WHERE passport_number = $1
`

func (q *Queries) GetUserByPassportNumber(ctx context.Context, passportNumber string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPassportNumber, passportNumber)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.PassportNumber,
		&i.Surname,
		&i.Name,
		&i.Patronymic,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUUID = `-- name: GetUserByUUID :one
SELECT uuid, passport_number, surname, name, patronymic, address, created_at, updated_at FROM users
WHERE uuid = $1
`

func (q *Queries) GetUserByUUID(ctx context.Context, userUuid pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUUID, userUuid)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.PassportNumber,
		&i.Surname,
		&i.Name,
		&i.Patronymic,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT uuid, passport_number, surname, name, patronymic, address, created_at, updated_at FROM users
WHERE
    (passport_number = $1 OR $1 IS NULL)
    AND (surname = $2 OR $2 IS NULL)
    AND (name = $3 OR $3 IS NULL)
    AND (patronymic = $4 OR $4 IS NULL)
    AND (address = $5 OR $5 IS NULL)
LIMIT $7 OFFSET $6
`

type GetUsersParams struct {
	PassportNumber pgtype.Text `json:"passport_number"`
	Surname        pgtype.Text `json:"surname"`
	Name           pgtype.Text `json:"name"`
	Patronymic     pgtype.Text `json:"patronymic"`
	Address        pgtype.Text `json:"address"`
	UserOffset     int32       `json:"user_offset"`
	UserLimit      int32       `json:"user_limit"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers,
		arg.PassportNumber,
		arg.Surname,
		arg.Name,
		arg.Patronymic,
		arg.Address,
		arg.UserOffset,
		arg.UserLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Uuid,
			&i.PassportNumber,
			&i.Surname,
			&i.Name,
			&i.Patronymic,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserByUUID = `-- name: UpdateUserByUUID :one
UPDATE users
SET surname = coalesce($1, surname),
    name = coalesce($2, name),
    patronymic = coalesce($3, patronymic),
    address = coalesce($4, address),
    passport_number = coalesce($5, passport_number)
WHERE uuid = $6
RETURNING uuid, passport_number, surname, name, patronymic, address, created_at, updated_at
`

type UpdateUserByUUIDParams struct {
	Surname        pgtype.Text `json:"surname"`
	Name           pgtype.Text `json:"name"`
	Patronymic     pgtype.Text `json:"patronymic"`
	Address        pgtype.Text `json:"address"`
	PassportNumber pgtype.Text `json:"passport_number"`
	UserUuid       pgtype.UUID `json:"user_uuid"`
}

func (q *Queries) UpdateUserByUUID(ctx context.Context, arg UpdateUserByUUIDParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserByUUID,
		arg.Surname,
		arg.Name,
		arg.Patronymic,
		arg.Address,
		arg.PassportNumber,
		arg.UserUuid,
	)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.PassportNumber,
		&i.Surname,
		&i.Name,
		&i.Patronymic,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
