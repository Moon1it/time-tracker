basePath: /
definitions:
  handler.errorResponse:
    properties:
      description:
        type: string
    type: object
  handler.statusResponse:
    properties:
      description:
        type: string
    type: object
  models.CompletedTask:
    properties:
      duration:
        type: string
      name:
        type: string
    type: object
  models.CreateTaskPayload:
    properties:
      name:
        type: string
    type: object
  models.CreateUserPayload:
    properties:
      address:
        type: string
      name:
        type: string
      passportNumber:
        type: string
      patronymic:
        type: string
      surname:
        type: string
    type: object
  models.Task:
    properties:
      endTime:
        type: string
      name:
        type: string
      startTime:
        type: string
      userUuid:
        type: string
      uuid:
        type: string
    type: object
  models.TasksResult:
    properties:
      CompletedTask:
        items:
          $ref: '#/definitions/models.CompletedTask'
        type: array
      totalDuration:
        type: string
    type: object
  models.UpdateUserPayload:
    properties:
      address:
        type: string
      name:
        type: string
      passportNumber:
        type: string
      patronymic:
        type: string
      surname:
        type: string
    type: object
  models.User:
    properties:
      address:
        type: string
      createdAt:
        type: string
      name:
        type: string
      passportNumber:
        type: string
      patronymic:
        type: string
      surname:
        type: string
      updatedAt:
        type: string
      uuid:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: API Server for Time Tracker Application
  title: Time Tracker API
  version: "1.0"
paths:
  /api/users:
    get:
      consumes:
      - application/json
      description: Retrieve a list of users with optional filters, limit, and offset.
      parameters:
      - default: 10
        description: Limit the number of users returned
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset the number of users returned
        in: query
        name: offset
        type: integer
      - description: Optional filters to apply on users
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: No users found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the given payload.
      parameters:
      - description: User creation payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Create a new user
      tags:
      - users
  /api/users/{uuid}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their UUID.
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/handler.statusResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: No users found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Delete user by UUID
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a user by their UUID.
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: No users found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Get user by UUID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Update a user's details by their UUID.
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: User Update Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: No fields to update
          schema:
            $ref: '#/definitions/handler.statusResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: No users found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "409":
          description: User with this passportNumber already exists
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Update user by UUID
      tags:
      - users
  /api/users/{uuid}/tasks/result:
    get:
      consumes:
      - application/json
      description: Retrieve tasks result for a user within a specified time period
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - default: day
        description: Time period ('day', 'week', 'month', 'year')
        in: query
        name: timePeriod
        type: string
      - default: "1"
        description: Amount of time
        in: query
        name: timeAmount
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tasks retrieved successfully
          schema:
            $ref: '#/definitions/models.TasksResult'
        "204":
          description: No tasks found for the specified period
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Get tasks result
      tags:
      - tasks
  /api/users/{uuid}/tasks/start:
    post:
      consumes:
      - application/json
      description: Create a new task for a user
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Task Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.CreateTaskPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Task created successfully
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "409":
          description: Task with this user UUID already exists. Please complete the
            active task first.
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Start a time task
      tags:
      - tasks
  /api/users/{uuid}/tasks/stop:
    post:
      consumes:
      - application/json
      description: Stop an active task for a user
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task stopped successfully
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: No users found or this user does not have an active task yet.
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Stop a time task
      tags:
      - tasks
  /api/users/info:
    get:
      consumes:
      - application/json
      description: Get user information by providing passport series and number.
      parameters:
      - description: Passport Series
        in: query
        name: passportSerie
        required: true
        type: string
      - description: Passport Number
        in: query
        name: passportNumber
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User info
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: People info
      tags:
      - users
swagger: "2.0"
